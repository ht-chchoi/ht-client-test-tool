package com.ht.testtool.ui;

import com.ht.testtool.core.MainContext;
import com.ht.testtool.data.dto.ConnectionInfo;
import com.ht.testtool.data.type.WebsocketClientType;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import io.netty.util.internal.StringUtil;

import javax.swing.*;
import java.awt.*;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class WebsocketPage {
  private final String websocketClientId;

  private JPanel mainPanel;
  private JTextArea taConsole;
  private JButton btnConnect;
  private JButton btnDisconnect;
  private JTextField tfIp;
  private JTextField tfPort;
  private JTextField tfSiteId;
  private JTextField tfDong;
  private JTextField tfHo;
  private JTextField tfDbIp;
  private JComboBox cbbClientType;
  private JTextField tfAccessToken;
  private JButton btnGetToken;
  private JTextField tfLobbyNum;
  private JTextArea taResponseData;

  public JPanel getMainPanel() {
    return mainPanel;
  }

  public WebsocketPage(final String websocketClientId) {
    this.websocketClientId = websocketClientId;
    this.btnConnect.addActionListener(e -> this.connectWebsocket());

    // TODO: 설정파일로 초기세팅 로드
    this.tfIp.setText("172.20.200.200");
    this.tfPort.setText("30002");
    this.tfSiteId.setText("8");
    this.tfDong.setText("701");
    this.tfHo.setText("904");
    this.tfDbIp.setText("192.168.2.82");
    this.tfAccessToken.setText("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJsYWJzX3RlYW0iLCJ1c2VyX2RldGFpbCI6eyJvYXV0aF91c2VyX2luZm8iOnsibWVtYmVySWQiOiJsYWJzX3RlYW0iLCJuYW1lIjoi7Jew6rWs7IaMIiwiYmlydGhkYXkiOm51bGwsImhvbWVQaG9uZU51bWJlciI6IiIsImNlbGxQaG9uZU51bWJlciI6IjAxMC00OTA0LTg2NjkiLCJlbWFpbCI6IiIsImdlbmRlciI6bnVsbCwiYXV0aG9yaXplZERhdGUiOm51bGx9fSwic2NvcGUiOlsidHJ1c3QiLCJyZWFkIiwid3JpdGUiXSwiZXhwIjoxNjQ1NzM1MTU3LCJqdGkiOiJjOWJhMmFjMC1hMTVkLTQ3ZTAtYjUwMi1mMWUxMDYzMDdjNzEiLCJjbGllbnRfaWQiOiJ0ZXN0In0.tkKF4wxc9W_KoEcpJO78ZJx8Aksutfv8JuoGY66khWs");
  }

  public String getWebsocketClientId() {
    return websocketClientId;
  }

  public void showMessageDialog(final String message) {
    JOptionPane.showMessageDialog(this.mainPanel, message);
  }

  private void connectWebsocket() {
    List<String> notValidFieldList = this.getNotValidMandatoryFieldList();
    if (notValidFieldList.size() > 0) {
      this.showMessageDialog("값이 없거나 잘못되었습니다.\n["
          + String.join("], [", notValidFieldList)
          + "]");
      return;
    }
    try {
      MainContext.getInstance().getWebsocketClientById(websocketClientId)
          .connect(
              websocketClientId,
              "{}",
              ConnectionInfo.builder()
                  .scheme("wss")
                  .ip(this.tfIp.getText())
                  .port(Integer.parseInt(this.tfPort.getText()))
                  .path("/wallpad/701/904/1")
                  .params(Map.of(
                      "siteId", this.tfSiteId.getText(),
                      "version", "1",
                      "ip", this.tfDbIp.getText(),
                      "id", "1",
                      "access_token", this.tfAccessToken.getText()))
                  .build(),
              WebsocketClientType.SIMPLE);
    } catch (InterruptedException | URISyntaxException ex) {
      ex.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // return list of not valid field
  private List<String> getNotValidMandatoryFieldList() {
    List<String> notValidFieldList = new ArrayList<>();
    if (!this.isValidField(this.tfIp.getText())) {
      notValidFieldList.add("ip");
    }
    if (!this.isValidField(this.tfPort.getText(), Integer.class)) {
      notValidFieldList.add("port");
    }
    if (!this.isValidField(this.tfSiteId.getText())) {
      notValidFieldList.add("siteId");
    }
    if (!this.isValidField(this.tfDong.getText())) {
      notValidFieldList.add("dong");
    }
    if (!this.isValidField(this.tfHo.getText())) {
      notValidFieldList.add("ho");
    }
    if (!this.isValidField(this.tfDbIp.getText())) {
      notValidFieldList.add("dpIp");
    }
    if (!this.isValidField(this.tfAccessToken.getText())) {
      notValidFieldList.add("access_token");
    }

    return notValidFieldList;
  }

  private boolean isValidField(final String text) {
    return this.isValidField(text, null);
  }

  private <T> boolean isValidField(final String text, final Class<T> targetClass) {
    if (StringUtil.isNullOrEmpty(text)) {
      return false;
    }
    if (targetClass != null && targetClass.equals(Integer.class)) {
      return text.chars().allMatch(Character::isDigit);
    }
    return true;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(4, 1, new Insets(5, 5, 5, 5), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 12, new Insets(0, 0, 0, 0), -1, -1));
    panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("ip");
    panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfIp = new JTextField();
    panel2.add(tfIp, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JLabel label2 = new JLabel();
    label2.setText("port");
    panel2.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfPort = new JTextField();
    panel2.add(tfPort, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
    final JLabel label3 = new JLabel();
    label3.setText("siteId");
    panel2.add(label3, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfSiteId = new JTextField();
    panel2.add(tfSiteId, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
    final JLabel label4 = new JLabel();
    label4.setText("dong");
    panel2.add(label4, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfDong = new JTextField();
    panel2.add(tfDong, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
    final JLabel label5 = new JLabel();
    label5.setText("ho");
    panel2.add(label5, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfHo = new JTextField();
    panel2.add(tfHo, new GridConstraints(0, 9, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JLabel label6 = new JLabel();
    label6.setText("dbIp");
    panel2.add(label6, new GridConstraints(0, 10, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfDbIp = new JTextField();
    panel2.add(tfDbIp, new GridConstraints(0, 11, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridLayoutManager(1, 6, new Insets(0, 0, 0, 0), -1, -1));
    panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
    cbbClientType = new JComboBox();
    panel3.add(cbbClientType, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label7 = new JLabel();
    label7.setText("access_token");
    panel3.add(label7, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfAccessToken = new JTextField();
    panel3.add(tfAccessToken, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    btnGetToken = new JButton();
    btnGetToken.setText("GetToken");
    panel3.add(btnGetToken, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label8 = new JLabel();
    label8.setText("lobbyNum");
    panel3.add(label8, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    tfLobbyNum = new JTextField();
    tfLobbyNum.setText("");
    panel3.add(tfLobbyNum, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
    btnConnect = new JButton();
    btnConnect.setText("Connect");
    panel4.add(btnConnect, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    btnDisconnect = new JButton();
    btnDisconnect.setText("Disconnect");
    panel4.add(btnDisconnect, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel5 = new JPanel();
    panel5.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(panel5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    final JLabel label9 = new JLabel();
    label9.setText("responseData");
    panel5.add(label9, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    taResponseData = new JTextArea();
    panel5.add(taResponseData, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(800, 150), new Dimension(150, 150), null, 0, false));
    final JPanel panel6 = new JPanel();
    panel6.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(panel6, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    final JLabel label10 = new JLabel();
    label10.setText("Log");
    panel6.add(label10, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    taConsole = new JTextArea();
    taConsole.setEditable(false);
    taConsole.setText("");
    panel6.add(taConsole, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(800, 150), new Dimension(150, 150), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }

}
